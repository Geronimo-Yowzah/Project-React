import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/esm/objectWithoutProperties";
import _defineProperty from "@babel/runtime-corejs3/helpers/esm/defineProperty";
const _excluded = ["keyMap"],
  _excluded2 = ["keyMap"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import { T as stubTrue } from 'ramda';
import { visit as astVisit, keyMapDefault as baseKeyMap, getNodeType as baseGetNodeType } from "../../traversal/visitor.js";
const nodeTypeGetter = node => {
  if (typeof (node === null || node === void 0 ? void 0 : node.type) === 'string') {
    return node.type;
  }
  return baseGetNodeType(node);
};
const keyMapDefault = _objectSpread({
  EphemeralObject: ['content'],
  EphemeralArray: ['content']
}, baseKeyMap);

// eslint-disable-next-line import/prefer-default-export
export const visit = (root,
// @ts-ignore
visitor, _ref = {}) => {
  let {
      keyMap = keyMapDefault
    } = _ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  return astVisit(root, visitor, _objectSpread({
    keyMap,
    // @ts-ignore
    nodeTypeGetter,
    nodePredicate: stubTrue,
    detectCycles: false,
    deleteNodeSymbol: Symbol.for('delete-node'),
    skipVisitingNodeSymbol: Symbol.for('skip-visiting-node')
  }, rest));
};

// @ts-ignore
visit[Symbol.for('nodejs.util.promisify.custom')] = async (root, _ref2 = {}) => {
  let {
      keyMap = keyMapDefault
    } = _ref2,
    rest = _objectWithoutProperties(_ref2, _excluded2);
  // @ts-ignore
  return astVisit[Symbol.for('nodejs.util.promisify.custom')](root, visitor, _objectSpread({
    keyMap,
    nodeTypeGetter,
    nodePredicate: stubTrue,
    detectCycles: false,
    deleteNodeSymbol: Symbol.for('delete-node'),
    skipVisitingNodeSymbol: Symbol.for('skip-visiting-node')
  }, rest));
};