import stampit from 'stampit';
import { curry, pathOr } from 'ramda';
import { isFunction, noop } from 'ramda-adjunct';
import { visit, PredicateVisitor } from "./visitor.js";
import { isElement } from "../predicates/index.js";
export const CallbackVisitor = stampit(PredicateVisitor, {
  props: {
    callback: noop
  },
  // @ts-ignore
  init({
    callback = this.callback
  } = {}) {
    this.callback = callback;
  },
  methods: {
    enter(element) {
      if (this.predicate(element)) {
        this.callback(element);
        return this.returnOnTrue;
      }
      return this.returnOnFalse;
    }
  }
});

// executes the callback on this element and all descendants
// traverse :: Callback | { predicate: Pred, callback: Callback } -> Element -> Undefined
const traverse = curry((options, element) => {
  let callback;
  let predicate;
  if (isFunction(options)) {
    callback = options;
    predicate = isElement;
  } else {
    callback = pathOr(noop, ['callback'], options);
    predicate = pathOr(isElement, ['predicate'], options);
  }
  const visitor = CallbackVisitor({
    callback,
    predicate
  });

  // @ts-ignore
  visit(element, visitor);
});
export default traverse;